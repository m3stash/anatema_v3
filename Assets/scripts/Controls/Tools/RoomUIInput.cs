//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls/Tools/RoomUIInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RoomUIInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RoomUIInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RoomUIInput"",
    ""maps"": [
        {
            ""name"": ""Modal_RoomMananger"",
            ""id"": ""b7f1f87c-3e9b-421f-99ea-4b96c6caf90a"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4fe57867-6387-4283-ad57-d89cbc0ab568"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d04695b-e6eb-4d8e-8329-61c497c2b11b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Modal_RoomMananger
        m_Modal_RoomMananger = asset.FindActionMap("Modal_RoomMananger", throwIfNotFound: true);
        m_Modal_RoomMananger_Close = m_Modal_RoomMananger.FindAction("Close", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Modal_RoomMananger
    private readonly InputActionMap m_Modal_RoomMananger;
    private List<IModal_RoomManangerActions> m_Modal_RoomManangerActionsCallbackInterfaces = new List<IModal_RoomManangerActions>();
    private readonly InputAction m_Modal_RoomMananger_Close;
    public struct Modal_RoomManangerActions
    {
        private @RoomUIInput m_Wrapper;
        public Modal_RoomManangerActions(@RoomUIInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Close => m_Wrapper.m_Modal_RoomMananger_Close;
        public InputActionMap Get() { return m_Wrapper.m_Modal_RoomMananger; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Modal_RoomManangerActions set) { return set.Get(); }
        public void AddCallbacks(IModal_RoomManangerActions instance)
        {
            if (instance == null || m_Wrapper.m_Modal_RoomManangerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Modal_RoomManangerActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
        }

        private void UnregisterCallbacks(IModal_RoomManangerActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
        }

        public void RemoveCallbacks(IModal_RoomManangerActions instance)
        {
            if (m_Wrapper.m_Modal_RoomManangerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IModal_RoomManangerActions instance)
        {
            foreach (var item in m_Wrapper.m_Modal_RoomManangerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Modal_RoomManangerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Modal_RoomManangerActions @Modal_RoomMananger => new Modal_RoomManangerActions(this);
    public interface IModal_RoomManangerActions
    {
        void OnClose(InputAction.CallbackContext context);
    }
}
